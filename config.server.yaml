version: [2]

logging:
        # One directory in which to store all plot job logs (the STDOUT/
        # STDERR of all plot jobs).  In order to monitor progress, plotman
        # reads these logs on a regular basis, so using a fast drive is
        # recommended.
        plots: /farm/logs/plots
        transfers: /farm/logs/transfers
        application: /farm/logs/plotman.log

# Options for display and rendering
user_interface:
        # Call out to the `stty` program to determine terminal size, instead of
        # relying on what is reported by the curses library.   In some cases,
        # the curses library fails to update on SIGWINCH signals.  If the
        # `plotman interactive` curses interface does not properly adjust when
        # you resize the terminal window, you can try setting this to True.
        use_stty_size: True

# Where to plot and log.
directories:
        # One or more directories to use as tmp dirs for plotting.  The
        # scheduler will use all of them and distribute jobs among them.
        # It assumes that IO is independent for each one (i.e., that each
        # one is on a different physical device).
        #
        # If multiple directories share a common prefix, reports will
        # abbreviate and show just the uniquely identifying suffix.
        tmp:
#                - /farm/yards/900
#                - /farm/yards/901
#                - /farm/yards/902
#                - /farm/yards/903
#                - /farm/yards/904
                - /farm/yards/907
#                - /farm/yards/908


        # Optional: tmp2 directory.  If specified, will be passed to
        # chia plots create as -2.  Only one tmp2 directory is supported.
        # tmp2: /farm/yards/908
        tmp2:
        - /farm/porches/701
        - /farm/porches/700

        # One or more directories; the scheduler will use all of them.
        # These again are presumed to be on independent physical devices,
        # so writes (plot jobs) and reads (archivals) can be scheduled
        # to minimize IO contention.
        dst:
#                - /farm/yards/908
#                - /farm/wagons/800
#                - /farm/wagons/801
#                - /farm/wagons/802
#                - /farm/wagons/803
#                - /farm/wagons/806
                - /farm/yards/907

archiving:
   target: local_rsync
   index: 0
   env:
     # me
     site_root: /farm/sites
     # them
     # site_root: /farm/them
     path_suffix: pool.xch1ph3flzr053eswzjc72gjvxjes6fcdamvl9kq5yqw6dnmwtpmlzkq8lzjmn

#  target: rsyncd
#  index: 1
#  env:
#    # me
#    site_root: /farm/sites
#    # them
#    # site_root: /farm/them
#    user: chia
#    host: chia
#    rsync_port: 12000
#    site: sites

#  target: local_rsync
#  index: 0
#  env:
#    command: rsync
#    site_root: /farm/sites
#    url_root: rsync://altendky@server:12000/sites
#  target_definitions:
#    local_rsync:
#      # env:
#      #   command: rsync
#      #   site_root: /farm/sites
#
#      # The disk space script must return a line for each directory
#      # to consider archiving to with the following form.
#      #
#      #   /some/path:1000000000000
#      #
#      # That line tells plotman that it should consider archiving
#      # plots to files at paths such as /some/path/theplotid.plot and
#      # that there is 1TB of space available for use in that
#      # directory.
#      disk_space_script: |
#        #!/bin/bash
#        df -BK | grep " ${site_root}/" | awk '{ gsub(/K$/,"",$4); print $6 ":" $4*1024 }'
#      transfer_script: |
#        #!/bin/bash
#        "${command}" --preallocate --remove-source-files --skip-compress plot --whole-file "${source}" "${destination}"
#      transfer_process_name: "{command}"
#      transfer_process_argument_prefix: "{site_root}"
#    rsyncd:
#      # env:
#      #   command: rsync
#      #   site_root: /farm/sites
#      #   url_root: rsync://altendky@server:12000/sites
#      disk_space_script: |
#        #!/bin/bash
#        ssh altendky@server "df -BK | grep \" ${site_root}/\" | awk '{ gsub(/K\$/,\"\",\$4); print \$6 \":\" \$4*1024 }'"
#      transfer_script: |
#        #!/bin/bash
#        relative_path=$(realpath --relative-to="${site_root}" "${destination}")
#        "${command}" --bwlimit=80000 --preallocate --remove-source-files --skip-compress plot --whole-file "${source}" "${url_root}/${relative_path}"
#      transfer_process_name: "{command}"
#      transfer_process_argument_prefix: "{url_root}"

# Plotting scheduling parameters
scheduling:
#        tmpdir_stagger_phase_limit: 1
#        tmpdir_stagger_phase_limit: 2
#        tmpdir_stagger_phase_limit: 3
#        tmpdir_stagger_phase_limit: 4
        tmpdir_stagger_phase_limit: 99

        # Don't run a job on a particular temp dir until all existing jobs
        # have progresed at least this far.  Phase major corresponds to the
        # plot phase, phase minor corresponds to the table or table pair
        # in sequence.
        tmpdir_stagger_phase_major: 4
        tmpdir_stagger_phase_minor: 0

        # Don't run more than this many jobs at a time on a single temp dir.
#        tmpdir_max_jobs: 1
#        tmpdir_max_jobs: 3
#        tmpdir_max_jobs: 6
#        tmpdir_max_jobs: 7
        tmpdir_max_jobs: 99
#        tmpdir_max_jobs: 11

        # Don't run any jobs (across all temp dirs) more often than this.
        # was 27
        global_stagger_m: 27

        # How often the daemon wakes to consider starting a new plot job
        polling_time_s: 20

        global_max_jobs: 2

        # Optional: Allows overriding some characteristics of certain tmp
        # directories. This contains a map of tmp directory names to
        # attributes. If a tmp directory and attribute is not listed here,
        # it uses the default attribute setting from the main configuration.
        #
        # Currently support override parameters:
        #     - tmpdir_max_jobs
        tmp_overrides:
                # In this example, /mnt/tmp/00 is larger than the other tmp
                # dirs and it can hold more plots than the default.
                #"/farm/yards/00":
                        #tmpdir_max_jobs: 5
#                "/farm/yards/902":
#                        tmpdir_max_jobs: 8
#                "/farm/yards/903":
#                        tmpdir_max_jobs: 4
#                "/farm/yards/904":
#                        tmpdir_max_jobs: 4
                "/farm/yards/907":
                        tmpdir_max_jobs: 21
#                "/farm/yards/908":
#                        tmpdir_max_jobs: 0

# Plotting parameters.  These are pass-through parameters to chia plots create.
# See documentation at
# https://github.com/Chia-Network/chia-blockchain/wiki/CLI-Commands-Reference#create
plotting:
    # me
    farmer_pk: b0a374845f4f4d6eab62fc4c5e17965d82ad7eee105818e5bd0cfcb46275a16acc4cd30955779bec841a716473416b21
    # pool_pk: a55d8fdada643a43d86a889c2c746ce848c0e2d00f7c012fc4c6e77d1e2f9f54a99dd38af59f8284f2178b810ecc7a95
    pool_contract_address: xch1ph3flzr053eswzjc72gjvxjes6fcdamvl9kq5yqw6dnmwtpmlzkq8lzjmn
    # them
    # farmer_pk: 8945f17a3017b39fe6f00b6c3746a3048271322cf86cb86719fd4f4056f0f0c13090c2448aa58dc1aafbda865a37b6cc
    # pool_pk: a94bdc58cb04fc158d7f6aebf11f8c38632018af054ba36137cafac5755afd74b5f935a7001312c755181d3af35d9bfa
    type: madmax
    chia:
        x: False
        k: 32
        e: False              # Use -e plotting option
#        n_threads: 1         # Threads per job
        n_threads: 2         # Threads per job
#        n_threads: 3         # Threads per job
#        n_threads: 4         # Threads per job
        n_buckets: 128       # Number of buckets to split data into
        job_buffer: 6000     # Per job memory
    madmax:
        executable: /farm/chia-plotter/build/chia_plot
        n_threads: 9
